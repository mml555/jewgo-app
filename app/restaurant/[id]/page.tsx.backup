'use client';

import React, { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Image from 'next/image';
import { Restaurant, RestaurantSpecial } from '@/types/restaurant';
import Logo from '@/components/Logo';
import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import { Suspense } from 'react';
import BottomNavigation from '@/components/BottomNavigation';
import { getHoursStatus, formatWeeklyHoursArray } from '@/utils/hours';

// Add JSON-LD schema for SEO
const generateRestaurantSchema = (restaurant: any) => {
  const schema = {
    "@context": "https://schema.org",
    "@type": "Restaurant",
    "name": restaurant.name,
    "description": restaurant.short_description || `${restaurant.name} - Kosher restaurant`,
    "url": restaurant.website || `https://jewgo.com/restaurant/${restaurant.id}`,
    "telephone": restaurant.phone,
    "address": {
      "@type": "PostalAddress",
      "streetAddress": restaurant.address,
      "addressLocality": restaurant.city,
      "addressRegion": restaurant.state,
      "postalCode": restaurant.zip_code
    },
    "geo": {
      "@type": "GeoCoordinates",
      "latitude": restaurant.latitude,
      "longitude": restaurant.longitude
    },
    "servesCuisine": "Kosher",
    "priceRange": restaurant.price_range || "$$",
    "image": restaurant.image_url || restaurant.image_path,
    "aggregateRating": {
      "@type": "AggregateRating",
      "ratingValue": restaurant.rating || 4.5,
      "reviewCount": restaurant.review_count || 10
    }
  };

  // Add hours if available
  if (restaurant.hours_open) {
    try {
      const hours = JSON.parse(restaurant.hours_open);
      schema.openingHoursSpecification = Object.entries(hours).map(([day, hours]: [string, any]) => ({
        "@type": "OpeningHoursSpecification",
        "dayOfWeek": day.charAt(0).toUpperCase() + day.slice(1),
        "opens": hours.open,
        "closes": hours.close
      }));
    } catch (error) {
      // If hours parsing fails, skip it
    }
  }

  return schema;
};

const RestaurantDetailPage: React.FC = () => {
  const params = useParams();
  const router = useRouter();
  const [restaurant, setRestaurant] = useState<Restaurant | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showFullSchedule, setShowFullSchedule] = useState(false);

  useEffect(() => {
    const fetchRestaurant = async () => {
      try {
        const response = await fetch(`http://localhost:8081/api/restaurants/${params.id}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        if (!response.ok) {
          throw new Error('Restaurant not found');
        }
        const data = await response.json();
        
        if (data.success && data.restaurant) {
          setRestaurant(data.restaurant);
        } else if (data.restaurant) {
          setRestaurant(data.restaurant);
        } else {
          throw new Error('Invalid response format');
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load restaurant');
      } finally {
        setLoading(false);
      }
    };

    if (params.id) {
      fetchRestaurant();
    }
  }, [params.id]);

  const getKosherTypeColor = (category?: string) => {
    switch (category?.toLowerCase()) {
      case 'meat':
        return 'bg-red-500/90 text-red-100';
      case 'dairy':
        return 'bg-blue-500/90 text-blue-100';
      case 'pareve':
        return 'bg-green-500/90 text-green-100';
      default:
        return 'bg-gray-500/90 text-gray-100';
    }
  };

  const getKosherTypeText = (category?: string) => {
    switch (category?.toLowerCase()) {
      case 'meat':
        return 'Meat';
      case 'dairy':
        return 'Dairy';
      case 'pareve':
        return 'Pareve';
      default:
        return 'Unknown';
    }
  };

  const getCertifyingAgencyColor = (agency?: string) => {
    switch (agency?.toUpperCase()) {
      case 'ORB': return 'bg-blue-500/90 text-blue-100';
      case 'KM': return 'bg-green-500/90 text-green-100';
      case 'OU': return 'bg-purple-500/90 text-purple-100';
      case 'STAR-K': return 'bg-orange-500/90 text-orange-100';
      case 'CRC': return 'bg-red-500/90 text-red-100';
      case 'KDM': return 'bg-yellow-500/90 text-yellow-100';
      case 'DIAMOND K': return 'bg-purple-500/90 text-purple-100';
      default: return 'bg-gray-500/90 text-gray-100';
    }
  };

  const getCertificationWebsite = (agency: string) => {
    switch (agency?.toUpperCase()) {
      case 'ORB': return 'https://www.orbkosher.com';
      case 'KM': return 'https://koshermiami.org';
      case 'KDM': return 'https://koshermiami.org';
      case 'DIAMOND K': return 'https://www.orbkosher.com';
      case 'OU': return 'https://oukosher.org';
      case 'STAR-K': return 'https://www.star-k.org';
      case 'CRC': return 'https://www.crcweb.org';
      default: return null;
    }
  };

  const handleCertificationClick = (agency: string, e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent any parent click events
    const website = getCertificationWebsite(agency);
    if (website) {
      window.open(website, '_blank', 'noopener,noreferrer');
    }
  };

  // Clean address formatter - no duplicates
  const formatAddress = (restaurant: Restaurant) => {
    const { address, city, state, zip_code } = restaurant;
    
    // Check if address already contains city/state/zip (common issue)
    if (address && address.includes(city || '') && address.includes(state || '') && address.includes(zip_code || '')) {
      // Address already contains full info, return as is
      return address;
    }
    
    // Build clean address from components
    const parts = [];
    
    // Add street address (remove any city/state/zip that might be embedded)
    if (address) {
      const cleanAddress = address.split(',').slice(0, 1).join(',').trim();
      parts.push(cleanAddress);
    }
    
    // Add city, state, zip
    if (city) parts.push(city);
    if (state) parts.push(state);
    if (zip_code) parts.push(zip_code);
    
    return parts.join(', ');
  };

  const formatPriceRange = (priceRange?: string, avgPrice?: string) => {
    if (priceRange) {
      return priceRange;
    }
    if (avgPrice) {
      return avgPrice;
    }
    return null;
  };

  const formatDiscount = (special: RestaurantSpecial) => {
    if (special.discount_percent) {
      return `${special.discount_percent}% OFF`;
    }
    if (special.discount_amount) {
      return `$${special.discount_amount} OFF`;
    }
    return '';
  };

  // Parse and format hours for display
  const formatHours = (hoursString?: string) => {
    if (!hoursString) return null;
    
    // Check if it's a simple status like "Open Now" or "Closed"
    if (hoursString.includes('🟢') || hoursString.includes('🔴') || hoursString.includes('Open') || hoursString.includes('Closed')) {
      return hoursString;
    }
    
    // Try to parse weekly hours
    try {
      const lines = hoursString.split('\n').filter(line => line.trim());
      return lines;
    } catch (error) {
      return [hoursString];
    }
  };

  // Format weekly hours for better display
  const formatWeeklyHoursLocal = (hoursString?: string) => {
    if (!hoursString) return null;
    
    // If it's a status string (like "🔴 Closed • Sunday: 8:00 AM – 10:00 PM"), skip it
    if (hoursString.includes('🟢') || hoursString.includes('🔴') || hoursString.includes('🟡')) {
      return null;
    }
    
    // Parse weekly hours like "Sun-Thu 11am-10pm, Fri 11am-3pm"
    const parts = hoursString.split(',').map(part => part.trim());
    return parts;
  };

  // Get current status from hours using the utility function
  const getCurrentStatus = (hoursString?: string) => {
    if (!hoursString) return null;
    
    const hoursStatus = getHoursStatus(hoursString);
    
    return {
      text: hoursStatus.label,
      color: hoursStatus.type === 'open' ? 'text-green-700' : 
             hoursStatus.type === 'unknown' ? 'text-gray-600' : 'text-red-600',
      tooltip: hoursStatus.tooltip
    };
  };

  // Better fallback image handling with restaurant-specific imagery
  const getHeroImage = (name?: string) => {
    // Priority 1: Use Google Places image_url (main image from Google Places)
    const imageUrl = restaurant?.image_url;
    
    // If we have a valid Google Places image URL, use it
    if (imageUrl && imageUrl !== 'null' && imageUrl !== '' && !imageUrl.includes('placeholder')) {
      return imageUrl;
    }
    
    // Priority 2: Use image_path as backup (if different from image_url)
    const imagePath = restaurant?.image_path;
    if (imagePath && imagePath !== 'null' && imagePath !== '' && imagePath !== imageUrl) {
      return imagePath;
    }
    
    // Priority 3: Restaurant-specific fallback images based on name/category
    const lowerName = name?.toLowerCase() || '';
    
    if (lowerName.includes('sushi') || lowerName.includes('japanese')) {
      return 'https://images.unsplash.com/photo-1579584425555-c3ce17fd4351?auto=format&fit=crop&w=2070&q=80';
    }
    
    if (lowerName.includes('cafe') || lowerName.includes('coffee') || lowerName.includes('berry')) {
      return 'https://images.unsplash.com/photo-1554118811-1e0d58224f24?auto=format&fit=crop&w=2070&q=80';
    }
    
    if (lowerName.includes('pizza') || lowerName.includes('italian')) {
      return 'https://images.unsplash.com/photo-1513104890138-7c749659a591?auto=format&fit=crop&w=2070&q=80';
    }
    
    if (lowerName.includes('burger') || lowerName.includes('american')) {
      return 'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?auto=format&fit=crop&w=2070&q=80';
    }
    
    // Default elegant restaurant image
    return 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?auto=format&fit=crop&w=2070&q=80';
  };

  // Helper function to format website URL properly
  const formatWebsiteUrl = (url?: string) => {
    if (!url) return null;
    
    // Remove any whitespace
    const cleanUrl = url.trim();
    
    // If it already starts with http:// or https://, return as is
    if (cleanUrl.startsWith('http://') || cleanUrl.startsWith('https://')) {
      return cleanUrl;
    }
    
    // If it doesn't start with a protocol, add https://
    return `https://${cleanUrl}`;
  };

  const getCategoryEmoji = (name: string, category?: string) => {
    const lowerName = name.toLowerCase();
    const lowerCategory = category?.toLowerCase() || '';
    
    // Check for specific food types in name
    if (lowerName.includes('sushi') || lowerName.includes('japanese')) return '🍣';
    if (lowerName.includes('pizza') || lowerName.includes('italian')) return '🍕';
    if (lowerName.includes('burger') || lowerName.includes('american')) return '🍔';
    if (lowerName.includes('ice cream') || lowerName.includes('dessert')) return '🍦';
    if (lowerName.includes('coffee') || lowerName.includes('cafe')) return '☕';
    if (lowerName.includes('bakery') || lowerName.includes('bread')) return '🥖';
    if (lowerName.includes('steak') || lowerName.includes('grill')) return '🥩';
    if (lowerName.includes('salad') || lowerName.includes('healthy')) return '🥗';
    if (lowerName.includes('chicken') || lowerName.includes('poultry')) return '🍗';
    if (lowerName.includes('fish') || lowerName.includes('seafood')) return '🐟';
    
    // Check category
    if (lowerCategory.includes('dairy')) return '🥛';
    if (lowerCategory.includes('meat')) return '🥩';
    if (lowerCategory.includes('pareve')) return '🥬';
    
    // Default restaurant emoji
    return '🍽️';
  };

  // Parse and format individual day hours for tooltips
  const parseDayHours = (hoursString?: string) => {
    if (!hoursString) return null;
    
    try {
      // Try to parse as JSON first
      const hours = JSON.parse(hoursString);
      const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
      const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
      
      return days.map((day, index) => {
        const dayHours = hours[day];
        if (dayHours && dayHours.open && dayHours.close) {
          return {
            day: dayNames[index],
            hours: `${dayHours.open} - ${dayHours.close}`,
            tooltip: `${dayNames[index]}: ${dayHours.open} to ${dayHours.close}`
          };
        }
        return {
          day: dayNames[index],
          hours: 'Closed',
          tooltip: `${dayNames[index]}: Closed`
        };
      });
    } catch (error) {
      // If JSON parsing fails, try to parse simple format
      if (typeof hoursString === 'string') {
        const lines = hoursString.split('\n').filter(line => line.trim());
        return lines.map((line, index) => {
          const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
          return {
            day: dayNames[index] || `Day ${index + 1}`,
            hours: line.trim(),
            tooltip: line.trim()
          };
        });
      }
      return null;
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-jewgo-primary mx-auto mb-4"></div>
          <p className="text-gray-600">Loading restaurant details...</p>
        </div>
      </div>
    );
  }

  if (error || !restaurant) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">⚠️</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Restaurant Not Found</h1>
          <p className="text-gray-600 mb-4">{error || 'The restaurant you are looking for could not be found.'}</p>
          <button
            onClick={() => router.back()}
            className="bg-jewgo-primary text-white px-6 py-2 rounded-lg hover:bg-jewgo-primary-dark transition-colors"
          >
            Go Back
          </button>
        </div>
      </div>
    );
  }

  // Only declare these ONCE, here:
  const certifyingAgency = restaurant.certifying_agency || 'Unknown';
  const formattedAddress = formatAddress(restaurant);
  const paidSpecials = restaurant.specials?.filter(special => special.is_paid && special.is_active) || [];
  
  // Get current status and weekly hours - use the same hours data for consistency
  const hoursData = restaurant.hours_open || restaurant.hours_of_operation;
  const weeklyHours = formatWeeklyHoursArray(hoursData);
  const currentStatus = getCurrentStatus(hoursData);

  const handleWebsiteClick = () => {
    if (restaurant.website) {
      const formattedUrl = formatWebsiteUrl(restaurant.website);
      if (formattedUrl) {
        window.open(formattedUrl, '_blank', 'noopener,noreferrer');
      }
    } else {
      // Priority 2: Link to Google Knowledge Graph
      if (restaurant.name && restaurant.address) {
        // Create a search query optimized for Google Knowledge Graph
        // Include business name, location, and "restaurant" to trigger knowledge panel
        const searchQuery = encodeURIComponent(`${restaurant.name} restaurant ${restaurant.city} ${restaurant.state}`);
        const googleKgUrl = `https://www.google.com/search?q=${searchQuery}`;
        window.open(googleKgUrl, '_blank', 'noopener,noreferrer');
      }
    }
  };

  const handleCallClick = () => {
    if (restaurant.phone_number) {
      window.open(`tel:${restaurant.phone_number}`, '_self');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* JSON-LD Schema for SEO */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(generateRestaurantSchema(restaurant))
        }}
      />
      
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 py-4 flex items-center justify-between">
            <div className="flex items-center space-x-3">
            <Logo size="sm" className="w-8 h-8" />
            <div className="text-xl font-bold text-gray-900">JewGo</div>
          </div>
        </div>
      </div>

      {/* Hero Image Section - Better aspect ratio and positioning */}
      <div className="relative h-64 bg-gray-200 overflow-hidden mt-4">
        <Image
          src={getHeroImage(restaurant.name)}
          alt={`${restaurant.name} restaurant hero image`}
          fill
          className="object-cover object-center"
          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1200px"
          priority
          quality={90}
        />
        
        {/* Navigation Overlay - Top of image */}
        <div className="absolute top-2 left-0 right-0 px-4 flex items-center justify-between z-10">
              <button
                onClick={() => router.back()}
            className="w-10 h-10 bg-black bg-opacity-30 rounded-full flex items-center justify-center backdrop-blur-sm hover:bg-opacity-50 transition-all duration-200"
            aria-label="Go back"
              >
            <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
          
          <div className="flex items-center space-x-3">
            <button 
              className="w-10 h-10 bg-black bg-opacity-30 rounded-full flex items-center justify-center backdrop-blur-sm hover:bg-opacity-50 transition-all duration-200"
              aria-label="Add to favorites"
            >
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
            </button>
            <button 
              className="w-10 h-10 bg-black bg-opacity-30 rounded-full flex items-center justify-center backdrop-blur-sm hover:bg-opacity-50 transition-all duration-200"
              aria-label="Share restaurant"
            >
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
              </svg>
            </button>
          </div>
        </div>

        {/* Category Badges Overlay - Certification on bottom-left, Kosher type on bottom-right */}
        {certifyingAgency && certifyingAgency !== 'Unknown' && (
          <div className="absolute bottom-4 left-4 z-10">
            <button
              onClick={(e) => handleCertificationClick(certifyingAgency, e)}
              className={`px-3 py-1.5 rounded-full text-white text-sm font-bold shadow-lg backdrop-blur-sm border-2 border-white/30 hover:bg-white/20 transition-all duration-200 ${getCertifyingAgencyColor(certifyingAgency)}`}
              title={`${certifyingAgency} Kosher Certification - Click to visit website`}
            >
              {certifyingAgency}
            </button>
            </div>
          )}
          
        {restaurant.kosher_category && (
          <div className="absolute bottom-4 right-4 z-10">
            <span className={`px-3 py-1.5 rounded-full text-white text-sm font-bold shadow-lg backdrop-blur-sm bg-black/70 border border-white/20 ${getKosherTypeColor(restaurant.kosher_category)}`}>
            {getKosherTypeText(restaurant.kosher_category)}
            </span>
          </div>
        )}
        </div>

      {/* Restaurant Information - Structured Layout */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Main Restaurant Info Card */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
          {/* Restaurant Name and Rating */}
          <div className="text-center mb-6">
          <h1 className="text-3xl font-bold text-gray-900 leading-tight">{restaurant.name}</h1>
          <div className="flex items-center justify-center space-x-6">
                <div className="flex items-center space-x-2">
              <svg className="w-6 h-6 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
              <span className="text-xl font-semibold text-gray-900">4.6</span>
            </div>
            <div className="text-gray-600 font-medium text-lg">
              {formatPriceRange(restaurant.price_range, restaurant.avg_price)}
                  </div>
                </div>
              </div>

          {/* Address Section */}
          <div className="text-center mb-6 pb-4 border-b border-gray-200">
            <p className="text-green-600 font-medium text-base leading-relaxed">{formattedAddress}</p>
          </div>
        </div>

        {/* Hours Card */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4 text-center">Hours</h2>
          <div className="max-w-md mx-auto">
          {currentStatus ? (
            <div className="bg-gray-50 rounded-xl p-6 shadow-md border border-gray-200">
              {/* Current Status - Enhanced with better visual hierarchy */}
              <div className="text-center mb-4">
                <span
                  className={`inline-flex items-center px-6 py-3 rounded-full text-base font-semibold shadow-sm ${
                    currentStatus.text === 'Open Now'
                      ? 'bg-green-100 text-green-800 border border-green-200'
                      : 'bg-red-100 text-red-800 border border-red-200'
                  }`}
                  title={currentStatus.tooltip}
                >
                  {currentStatus.text === 'Open Now' ? '🟢 ' : '🔴 '}
                  {/* Google-style summary */}
                  {currentStatus.text === 'Open Now' && currentStatus.tooltip
                    ? `Hours: Open now ⋅ Closes ${currentStatus.tooltip.split(' - ')[1]}`
                    : currentStatus.text.includes('Opens')
                      ? `Hours: ${currentStatus.text}`
                      : `Hours: ${currentStatus.text}`
                  }
                </span>
              </div>
              
              {/* View full schedule toggle - Enhanced styling */}
              {weeklyHours && weeklyHours.length > 0 && (
                <div className="text-center">
                  <button
                    className="text-sm text-jewgo-primary font-medium hover:text-jewgo-primary-dark focus:outline-none transition-colors duration-200"
                    onClick={() => setShowFullSchedule((v) => !v)}
                    aria-label="View full schedule"
                    type="button"
                  >
                    {showFullSchedule ? 'Hide full schedule' : 'View full schedule'}
                  </button>
                  
                  {/* Full Schedule - Enhanced with better visual hierarchy */}
                  {showFullSchedule && (
                    <div className="mt-4 bg-white rounded-lg shadow-sm border border-gray-200 p-4">
                      <h3 className="text-sm font-semibold text-gray-900 mb-3 text-center">Weekly Hours</h3>
                      <ul className="space-y-2">
                        {weeklyHours.map((day: any, idx: number) => {
                          const isToday = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase() === day.day.toLowerCase();
                          return (
                            <li key={idx} className={`flex justify-between items-center py-2 px-3 rounded-md transition-colors duration-200 ${
                              isToday 
                                ? 'bg-jewgo-primary/10 border border-jewgo-primary/20 font-semibold text-jewgo-primary' 
                                : 'hover:bg-gray-50'
                            }`}>
                              <span className={`font-medium ${isToday ? 'text-jewgo-primary' : 'text-gray-700'}`}>
                                {day.day}
                              </span>
                              <span className={`${isToday ? 'font-bold text-jewgo-primary' : 'text-gray-600'}`}>
                                {day.hours}
                              </span>
                            </li>
                          );
                        })}
                      </ul>
                    </div>
                  )}
                </div>
              )}
            </div>
          ) : (
            <div className="bg-gray-50 rounded-xl p-6 shadow-md border border-gray-200">
              <div className="text-center">
                <span className="inline-flex items-center px-6 py-3 rounded-full text-base font-semibold bg-gray-100 text-gray-600 border border-gray-200 shadow-sm">
                  🕒 Hours: Not available
                </span>
              </div>
            </div>
          )}
          </div>
        </div>

        {/* Specials Section - Centered */}
        {paidSpecials.length > 0 && (
          <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4 text-center">Our Specials</h2>
            <div className="flex space-x-4 overflow-x-auto pb-2 justify-center">
              {paidSpecials.slice(0, 3).map((special, index) => (
                <div key={special.id} className="bg-white border rounded-lg overflow-hidden shadow-sm flex-shrink-0 w-48 hover:shadow-md hover:scale-105 transition-all duration-200">
                  {/* Food Image - Better visuals with fallback icons */}
                  <div className="h-32 bg-gray-200 relative">
                    <div className="w-full h-full bg-gradient-to-br from-orange-100 to-red-100 flex items-center justify-center">
                      {/* Better food icons based on special type */}
                      {special.special_type === 'discount' && (
                        <div className="text-center">
                          <div className="text-4xl mb-2" role="img" aria-label="Burger">🍔</div>
                          <div className="text-2xl" role="img" aria-label="French fries">🍟</div>
            </div>
          )}
                      {special.special_type === 'promotion' && (
                        <div className="text-center">
                          <div className="text-4xl mb-2" role="img" aria-label="Sushi">🍣</div>
                          <div className="text-2xl" role="img" aria-label="Cucumber">🥒</div>
            </div>
          )}
                      {special.special_type === 'event' && (
                        <div className="text-center">
                          <div className="text-4xl mb-2" role="img" aria-label="Cocktail">🍹</div>
                          <div className="text-2xl" role="img" aria-label="Lemon">🍋</div>
                </div>
              )}
                    </div>
                  </div>
                  <div className="p-3">
                    <h3 className="font-semibold text-sm text-gray-900 mb-2 leading-tight">{special.title}</h3>
                    {formatDiscount(special) && (
                      <p className="text-red-600 font-bold text-sm">{formatDiscount(special)}</p>
                    )}
                </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Action Buttons Card */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4 text-center">Get in Touch</h2>
          <div className="flex space-x-4 max-w-md mx-auto">
          {/* Website Button */}
          <button
            onClick={() => handleWebsiteClick()}
            className="flex-1 border-2 border-black text-black py-4 rounded-full font-medium flex items-center justify-center space-x-2 hover:bg-black hover:text-white transition-all duration-200"
            aria-label={`Visit ${restaurant.name} website`}
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
            </svg>
            <span>Website</span>
          </button>

          {/* Order Button */}
          <button className="flex-1 border-2 border-green-600 text-green-600 py-4 rounded-full font-medium flex items-center justify-center space-x-2 hover:bg-green-600 hover:text-white transition-all duration-200" aria-label={`Order from ${restaurant.name}`}>
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
            </svg>
            <span>Order</span>
          </button>

          {/* Call Button */}
          <button
            onClick={() => handleCallClick()}
            className="flex-1 border-2 border-black text-black py-4 rounded-full font-medium flex items-center justify-center space-x-2 hover:bg-black hover:text-white transition-all duration-200"
            aria-label={`Call ${restaurant.name} at ${restaurant.phone}`}
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
            </svg>
            <span>Call</span>
          </button>
          </div>
        </div>

        {/* About Us Section - Restaurant Specific */}
        {restaurant.short_description && (
          <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6 max-w-2xl mx-auto">
            <h2 className="text-xl font-bold text-gray-900 mb-4 text-center">About {restaurant.name}</h2>
            <div className="text-center">
              <p className="text-gray-700 leading-relaxed">
                {restaurant.short_description}
              </p>
              <div className="flex items-center justify-center space-x-6 pt-4 mt-4 border-t border-gray-200">
                <div className="flex items-center space-x-2">
                  <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
                  <span className="text-sm text-gray-600">Kosher Certified</span>
                </div>
                <div className="flex items-center space-x-2">
                  <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <span className="text-sm text-gray-600">Verified</span>
                </div>
                <div className="flex items-center space-x-2">
                  <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span className="text-sm text-gray-600">Fresh Info</span>
                </div>
              </div>
              </div>
            </div>
          )}
        </div>

        {/* Reviews Section */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4 text-center">⭐ Customer Reviews</h2>
          <div className="space-y-4">
            {/* Sample Reviews - In production, these would come from the database */}
            <div className="border-b border-gray-100 pb-4">
              <div className="flex items-center space-x-3 mb-2">
                <div className="w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold">
                  SM
                </div>
                <div>
                  <div className="font-semibold text-gray-900">Sarah M.</div>
                  <div className="flex items-center space-x-1">
                    <div className="flex text-yellow-400">
                      {[...Array(5)].map((_, i) => (
                        <svg key={i} className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292z" />
                        </svg>
                      ))}
                    </div>
                    <span className="text-sm text-gray-500">2 days ago</span>
                  </div>
                </div>
              </div>
              <p className="text-gray-700 text-sm">Amazing food and great service! The kosher certification gives me peace of mind. Highly recommend!</p>
            </div>

            <div className="border-b border-gray-100 pb-4">
              <div className="flex items-center space-x-3 mb-2">
                <div className="w-10 h-10 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center text-white font-semibold">
                  DJ
                </div>
                <div>
                  <div className="font-semibold text-gray-900">David J.</div>
                  <div className="flex items-center space-x-1">
                    <div className="flex text-yellow-400">
                      {[...Array(4)].map((_, i) => (
                        <svg key={i} className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292z" />
                        </svg>
                      ))}
                    </div>
                    <span className="text-sm text-gray-500">1 week ago</span>
                  </div>
                </div>
              </div>
              <p className="text-gray-700 text-sm">Great atmosphere and the food is always fresh. Perfect for family dinners.</p>
            </div>

            <div className="text-center">
              <button className="text-jewgo-primary font-medium hover:text-jewgo-primary-dark transition-colors duration-200">
                View all reviews (12)
              </button>
            </div>
          </div>
        </div>

        {/* Tags Section */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4 text-center">🔖 Restaurant Tags</h2>
          <div className="flex flex-wrap justify-center gap-2">
            <span className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium">$$</span>
            <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">Dine-In</span>
            <span className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm font-medium">Delivery</span>
            <span className="px-3 py-1 bg-orange-100 text-orange-800 rounded-full text-sm font-medium">Takeout</span>
            <span className="px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm font-medium">Pizza</span>
            <span className="px-3 py-1 bg-indigo-100 text-indigo-800 rounded-full text-sm font-medium">Italian</span>
            <span className="px-3 py-1 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium">Family-Friendly</span>
            <span className="px-3 py-1 bg-pink-100 text-pink-800 rounded-full text-sm font-medium">Kosher</span>
          </div>
        </div>

        {/* Kosher Certification Documents Section */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4 text-center">🧾 Kosher Certification</h2>
          <div className="space-y-4">
            <div className="text-center mb-4">
              <p className="text-gray-600 mb-4">View official kosher certification documents and compliance information.</p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <button className="flex items-center justify-center space-x-3 p-4 border-2 border-gray-200 rounded-lg hover:border-jewgo-primary hover:bg-jewgo-primary/5 transition-all duration-200">
                <svg className="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                <div className="text-left">
                  <div className="font-semibold text-gray-900">Kosher Certificate</div>
                  <div className="text-sm text-gray-500">Official certification document</div>
                </div>
              </button>

              <button className="flex items-center justify-center space-x-3 p-4 border-2 border-gray-200 rounded-lg hover:border-jewgo-primary hover:bg-jewgo-primary/5 transition-all duration-200">
                <svg className="w-8 h-8 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <div className="text-left">
                  <div className="font-semibold text-gray-900">Compliance Report</div>
                  <div className="text-sm text-gray-500">Latest inspection results</div>
                </div>
              </button>

              <button className="flex items-center justify-center space-x-3 p-4 border-2 border-gray-200 rounded-lg hover:border-jewgo-primary hover:bg-jewgo-primary/5 transition-all duration-200">
                <svg className="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div className="text-left">
                  <div className="font-semibold text-gray-900">Kashrut Guidelines</div>
                  <div className="text-sm text-gray-500">Restaurant policies</div>
                </div>
              </button>

              <button className="flex items-center justify-center space-x-3 p-4 border-2 border-gray-200 rounded-lg hover:border-jewgo-primary hover:bg-jewgo-primary/5 transition-all duration-200">
                <svg className="w-8 h-8 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div className="text-left">
                  <div className="font-semibold text-gray-900">FAQ</div>
                  <div className="text-sm text-gray-500">Common questions</div>
                </div>
              </button>
            </div>

            <div className="text-center mt-4">
              <button className="text-jewgo-primary font-medium hover:text-jewgo-primary-dark transition-colors duration-200">
                Contact certifying agency for more information
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Bottom Navigation Bar - 5 tabs as shown in breakdown */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 shadow-lg">
        <div className="flex items-center justify-around">
          {/* Home */}
          <button 
            onClick={() => router.push('/')}
            className="flex flex-col items-center"
            aria-label="Go to home page"
          >
            <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
            <span className="text-xs text-gray-400">Home</span>
            </button>
          
          {/* Explore - Active (highlighted in green) */}
          <div className="flex flex-col items-center">
            <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            <span className="text-xs text-green-600 font-medium">Explore</span>
          </div>
          
          {/* Favorites */}
          <div className="flex flex-col items-center">
            <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            <span className="text-xs text-gray-400">Favorites</span>
          </div>
          
          {/* Specials */}
          <div className="flex flex-col items-center">
            <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
            </svg>
            <span className="text-xs text-gray-400">Specials</span>
          </div>
          
          {/* Profile */}
          <div className="flex flex-col items-center">
            <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            <span className="text-xs text-gray-400">Profile</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RestaurantDetailPage; 