'use client';

import { useEffect, useState } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

interface Restaurant {
  id: number;
  name: string;
  latitude: number;
  longitude: number;
  address: string;
  city?: string;
  state?: string;
  certifying_agency?: string;
  kosher_category?: string;
  phone_number?: string;
}

interface RealMapProps {
  restaurants: Restaurant[];
  onRestaurantSelect?: (restaurant: Restaurant) => void;
}

// Fix for default markers in Leaflet
const LAny = L as any;
delete LAny.Icon.Default.prototype._getIconUrl;
LAny.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

// Custom marker icons for different certifying agencies
const createCustomIcon = (certifyingAgency?: string) => {
  const colors = {
    'ORB': '#3B82F6',
    'KM': '#10B981',
    'KDM': '#F59E0B',
    'Diamond K': '#8B5CF6',
    'default': '#6B7280'
  };

  const color = colors[certifyingAgency as keyof typeof colors] || colors.default;
  
  return LAny.divIcon({
    className: 'custom-marker',
    html: `
      <div style="
        background-color: ${color};
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 3px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 12px;
      ">
        ${certifyingAgency === 'ORB' ? 'O' : 
          certifyingAgency === 'KM' ? 'K' :
          certifyingAgency === 'KDM' ? 'D' : 
          certifyingAgency === 'Diamond K' ? 'DK' : 'R'}
      </div>
    `,
    iconSize: [30, 30],
    iconAnchor: [15, 30],
    popupAnchor: [0, -30]
  });
};

// Component to handle map interactions
function MapController({ restaurants, onRestaurantSelect }: { restaurants: Restaurant[], onRestaurantSelect?: (restaurant: Restaurant) => void }) {
  const map = useMap();

  useEffect(() => {
    if (restaurants.length > 0) {
      const bounds = LAny.latLngBounds(
        restaurants.map(r => [r.latitude, r.longitude])
      );
      map.fitBounds(bounds, { padding: [20, 20] });
    }
  }, [restaurants, map]);

  return null;
}

export default function RealMap({ restaurants, onRestaurantSelect }: RealMapProps) {
  const [selectedRestaurant, setSelectedRestaurant] = useState<Restaurant | null>(null);

  // Default center (Miami Beach area)
  const defaultCenter: [number, number] = [25.7617, -80.1918];

  const handleMarkerClick = (restaurant: Restaurant) => {
    setSelectedRestaurant(restaurant);
    if (onRestaurantSelect) {
      onRestaurantSelect(restaurant);
    }
  };

  const handleGetDirections = (restaurant: Restaurant) => {
    const url = `https://www.google.com/maps/dir/?api=1&destination=${restaurant.latitude},${restaurant.longitude}`;
    window.open(url, '_blank');
  };

  const handleViewDetails = (restaurant: Restaurant) => {
    window.location.href = `/restaurant/${restaurant.id}`;
  };

  return (
    <div className="relative h-full">
      {/* Real Map Container */}
      <div className="w-full h-full">
        <MapContainer
          center={defaultCenter}
          zoom={12}
          style={{ height: '100%', width: '100%' }}
          className="z-0"
        >
          {/* OpenStreetMap Tiles */}
          <TileLayer
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          />

          {/* Restaurant Markers */}
          {restaurants.map((restaurant) => (
            <Marker
              key={restaurant.id}
              position={[restaurant.latitude, restaurant.longitude]}
              icon={createCustomIcon(restaurant.certifying_agency)}
              eventHandlers={{
                click: () => handleMarkerClick(restaurant),
              }}
            >
              <Popup>
                <div className="p-2">
                  <h3 className="font-bold text-sm mb-1">{restaurant.name}</h3>
                  <p className="text-xs text-gray-600 mb-2">
                    {restaurant.address}
                    {restaurant.city && `, ${restaurant.city}`}
                    {restaurant.state && `, ${restaurant.state}`}
                  </p>
                  {restaurant.phone_number && (
                    <p className="text-xs text-gray-600 mb-2">
                      ðŸ“ž {restaurant.phone_number}
                    </p>
                  )}
                  <div className="flex items-center space-x-2 mb-2">
                    {restaurant.certifying_agency && (
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        restaurant.certifying_agency === 'ORB' ? 'bg-blue-100 text-blue-800' :
                        restaurant.certifying_agency === 'KM' ? 'bg-green-100 text-green-800' :
                        restaurant.certifying_agency === 'KDM' ? 'bg-yellow-100 text-yellow-800' :
                        restaurant.certifying_agency === 'Diamond K' ? 'bg-purple-100 text-purple-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {restaurant.certifying_agency}
                      </span>
                    )}
                    {restaurant.kosher_category && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                        {restaurant.kosher_category}
                      </span>
                    )}
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handleGetDirections(restaurant)}
                      className="flex-1 bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600 transition-colors"
                    >
                      Directions
                    </button>
                    <button
                      onClick={() => handleViewDetails(restaurant)}
                      className="flex-1 bg-gray-500 text-white px-2 py-1 rounded text-xs hover:bg-gray-600 transition-colors"
                    >
                      Details
                    </button>
                  </div>
                </div>
              </Popup>
            </Marker>
          ))}

          <MapController restaurants={restaurants} onRestaurantSelect={onRestaurantSelect} />
        </MapContainer>
      </div>

      {/* Map Controls Overlay */}
      <div className="absolute top-4 left-4 z-10">
        <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg p-3">
          <h2 className="text-lg font-semibold text-gray-800 mb-2">Kosher Restaurants</h2>
          <p className="text-sm text-gray-600">
            <strong>{restaurants.length}</strong> restaurants found
          </p>
        </div>
      </div>

      {/* Legend */}
      <div className="absolute top-4 right-4 z-10">
        <div className="bg-white/90 backdrop-blur-sm rounded-lg shadow-lg p-3">
          <h4 className="font-semibold text-sm mb-2">Certification</h4>
          <div className="space-y-1 text-xs">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 rounded-full bg-blue-600"></div>
              <span>ORB</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 rounded-full bg-green-600"></div>
              <span>KM</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 rounded-full bg-yellow-600"></div>
              <span>KDM</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 rounded-full bg-purple-600"></div>
              <span>Diamond K</span>
            </div>
          </div>
        </div>
      </div>

      {/* Restaurant Info Panel */}
      {selectedRestaurant && (
        <div className="absolute bottom-4 left-4 right-4 z-10 bg-white rounded-lg shadow-xl p-4 animate-fade-in-up">
          <div className="flex items-start justify-between mb-3">
            <div className="flex-1">
              <h3 className="font-bold text-lg text-gray-900">{selectedRestaurant.name}</h3>
              <p className="text-gray-600 text-sm mt-1">
                {selectedRestaurant.address}
                {selectedRestaurant.city && `, ${selectedRestaurant.city}`}
                {selectedRestaurant.state && `, ${selectedRestaurant.state}`}
              </p>
            </div>
            <button
              onClick={() => setSelectedRestaurant(null)}
              className="text-gray-400 hover:text-gray-600 ml-2"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          {selectedRestaurant.phone_number && (
            <p className="text-gray-600 text-sm mb-3">
              ðŸ“ž {selectedRestaurant.phone_number}
            </p>
          )}

          <div className="flex items-center space-x-2 mb-3">
            {selectedRestaurant.certifying_agency && (
              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                selectedRestaurant.certifying_agency === 'ORB' ? 'bg-blue-100 text-blue-800' :
                selectedRestaurant.certifying_agency === 'KM' ? 'bg-green-100 text-green-800' :
                selectedRestaurant.certifying_agency === 'KDM' ? 'bg-yellow-100 text-yellow-800' :
                selectedRestaurant.certifying_agency === 'Diamond K' ? 'bg-purple-100 text-purple-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {selectedRestaurant.certifying_agency}
              </span>
            )}
            {selectedRestaurant.kosher_category && (
              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                {selectedRestaurant.kosher_category}
              </span>
            )}
          </div>

          <div className="flex space-x-2">
            <button
              onClick={() => handleGetDirections(selectedRestaurant)}
              className="flex-1 bg-jewgo-primary text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors"
            >
              Get Directions
            </button>
            <button
              onClick={() => handleViewDetails(selectedRestaurant)}
              className="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors"
            >
              View Details
            </button>
          </div>
        </div>
      )}

      {/* Instructions */}
      <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 z-10 bg-white/90 backdrop-blur-sm rounded-lg shadow-lg px-4 py-2">
        <p className="text-xs text-gray-600 text-center">
          Click markers for details â€¢ Use mouse to zoom and pan â€¢ Real OpenStreetMap data
        </p>
      </div>
    </div>
  );
} 